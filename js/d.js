(function (a) { "use strict"; function b(a) { switch (typeof a) { case "undefined": return "undefined"; case "boolean": return "boolean"; case "number": return "number"; case "string": return "string"; default: return null === a ? "null" : "object"; } } function c(a) { return Object.prototype.toString.call(a).replace(/^\[object *|\]$/g, "") } function d(a) { return "function" == typeof a } function e(a) { if (null === a || a === void 0) throw TypeError(); return Object(a) } function f(a) { return a >> 0 } function g(a) { return a >>> 0 } function h(a) { function b(b) { Object.defineProperty(a, b, { get: function () { return a._getter(b) }, set: function (c) { a._setter(b, c) }, enumerable: !0, configurable: !1 }) } if (a.length > 100000) throw RangeError("Array too large for polyfill"); var c; for (c = 0; c < a.length; c += 1)b(c) } function i(a, b) { var c = 32 - b; return a << c >> c } function j(a, b) { var c = 32 - b; return a << c >>> c } function k(a) { return [255 & a] } function l(a) { return i(a[0], 8) } function m(a) { return [255 & a] } function n(a) { return j(a[0], 8) } function o(a) { return a = K(+a), [0 > a ? 0 : 255 < a ? 255 : 255 & a] } function p(a) { return [255 & a >> 8, 255 & a] } function q(a) { return i(a[0] << 8 | a[1], 16) } function r(a) { return [255 & a >> 8, 255 & a] } function s(a) { return j(a[0] << 8 | a[1], 16) } function t(a) { return [255 & a >> 24, 255 & a >> 16, 255 & a >> 8, 255 & a] } function u(a) { return i(a[0] << 24 | a[1] << 16 | a[2] << 8 | a[3], 32) } function v(a) { return [255 & a >> 24, 255 & a >> 16, 255 & a >> 8, 255 & a] } function w(a) { return j(a[0] << 24 | a[1] << 16 | a[2] << 8 | a[3], 32) } function x(a, b, c) { function d(a) { var b = F(a), c = a - b; return .5 > c ? b : .5 < c ? b + 1 : b % 2 ? b + 1 : b } var g, h, j, k, l, m, n, o = (1 << b - 1) - 1; for (a === a ? a === 1 / 0 || a === -Infinity ? (h = (1 << b) - 1, j = 0, g = 0 > a ? 1 : 0) : 0 === a ? (h = 0, j = 0, g = 1 / a == -Infinity ? 1 : 0) : (g = 0 > a, a = E(a), a >= J(2, 1 - o) ? (h = I(F(G(a) / D), 1023), j = d(a / J(2, h) * J(2, c)), 2 <= j / J(2, c) && (++h, j = 1), h > o ? (h = (1 << b) - 1, j = 0) : (h += o, j -= J(2, c))) : (h = 0, j = d(a / J(2, 1 - o - c)))) : (h = (1 << b) - 1, j = J(2, c - 1), g = 0), l = [], k = c; k; k -= 1)l.push(j % 2 ? 1 : 0), j = F(j / 2); for (k = b; k; k -= 1)l.push(h % 2 ? 1 : 0), h = F(h / 2); for (l.push(g ? 1 : 0), l.reverse(), m = l.join(""), n = []; m.length;)n.push(parseInt(m.substring(0, 8), 2)), m = m.substring(8); return n } function y(a, c, d) { var g, h, k, l, m, n, o, p, q = []; for (g = a.length; g; g -= 1)for (k = a[g - 1], h = 8; h; h -= 1)q.push(k % 2 ? 1 : 0), k >>= 1; return q.reverse(), l = q.join(""), m = (1 << c - 1) - 1, n = parseInt(l.substring(0, 1), 2) ? -1 : 1, o = parseInt(l.substring(1, 1 + c), 2), p = parseInt(l.substring(1 + c), 2), o === (1 << c) - 1 ? 0 === p ? n * (1 / 0) : NaN : 0 < o ? n * J(2, o - m) * (1 + p / J(2, d)) : 0 === p ? 0 > n ? -0 : 0 : n * J(2, -(m - 1)) * (p / J(2, d)) } function z(a) { return y(a, 11, 52) } function A(a) { return x(a, 11, 52) } function B(a) { return y(a, 8, 23) } function C(a) { return x(a, 8, 23) } var D = Math.LN2, E = Math.abs, F = Math.floor, G = Math.log, H = Math.max, I = Math.min, J = Math.pow, K = Math.round; (function () { var a = Object.defineProperty, b = !function () { try { return Object.defineProperty({}, "x", {}) } catch (a) { return !1 } }(); (!a || b) && (Object.defineProperty = function (b, c, d) { if (a) try { return a(b, c, d) } catch (a) { } if (b !== Object(b)) throw TypeError("Object.defineProperty called on non-object"); return Object.prototype.__defineGetter__ && "get" in d && Object.prototype.__defineGetter__.call(b, c, d.get), Object.prototype.__defineSetter__ && "set" in d && Object.prototype.__defineSetter__.call(b, c, d.set), "value" in d && (b[c] = d.value), b }) })(), function () { function j(a) { if (a = f(a), 0 > a) throw RangeError("ArrayBuffer size is not a small enough positive integer."); Object.defineProperty(this, "byteLength", { value: a }), Object.defineProperty(this, "_bytes", { value: Array(a) }); for (var b = 0; b < a; b += 1)this._bytes[b] = 0 } function x() { if (!arguments.length || "object" != typeof arguments[0]) return function (a) { if (a = f(a), 0 > a) throw RangeError("length is not a small enough positive integer."); Object.defineProperty(this, "length", { value: a }), Object.defineProperty(this, "byteLength", { value: a * this.BYTES_PER_ELEMENT }), Object.defineProperty(this, "buffer", { value: new j(this.byteLength) }), Object.defineProperty(this, "byteOffset", { value: 0 }) }.apply(this, arguments); if (1 <= arguments.length && "object" === b(arguments[0]) && arguments[0] instanceof x) return function (a) { if (this.constructor !== a.constructor) throw TypeError(); var b = a.length * this.BYTES_PER_ELEMENT; Object.defineProperty(this, "buffer", { value: new j(b) }), Object.defineProperty(this, "byteLength", { value: b }), Object.defineProperty(this, "byteOffset", { value: 0 }), Object.defineProperty(this, "length", { value: a.length }); for (var c = 0; c < this.length; c += 1)this._setter(c, a._getter(c)) }.apply(this, arguments); if (1 <= arguments.length && "object" === b(arguments[0]) && !(arguments[0] instanceof x) && !(arguments[0] instanceof j || "ArrayBuffer" === c(arguments[0]))) return function (a) { var b = a.length * this.BYTES_PER_ELEMENT; Object.defineProperty(this, "buffer", { value: new j(b) }), Object.defineProperty(this, "byteLength", { value: b }), Object.defineProperty(this, "byteOffset", { value: 0 }), Object.defineProperty(this, "length", { value: a.length }); for (var c, d = 0; d < this.length; d += 1)c = a[d], this._setter(d, +c) }.apply(this, arguments); if (1 <= arguments.length && "object" === b(arguments[0]) && (arguments[0] instanceof j || "ArrayBuffer" === c(arguments[0]))) return function (a, b, c) { if (b = g(b), b > a.byteLength) throw RangeError("byteOffset out of range"); if (b % this.BYTES_PER_ELEMENT) throw RangeError("buffer length minus the byteOffset is not a multiple of the element size."); if (void 0 === c) { var d = a.byteLength - b; if (d % this.BYTES_PER_ELEMENT) throw RangeError("length of buffer minus byteOffset not a multiple of the element size"); c = d / this.BYTES_PER_ELEMENT } else c = g(c), d = c * this.BYTES_PER_ELEMENT; if (b + d > a.byteLength) throw RangeError("byteOffset and length reference an area beyond the end of the buffer"); Object.defineProperty(this, "buffer", { value: a }), Object.defineProperty(this, "byteLength", { value: d }), Object.defineProperty(this, "byteOffset", { value: b }), Object.defineProperty(this, "length", { value: c }) }.apply(this, arguments); throw TypeError() } function y(a, b, c) { var d = function () { Object.defineProperty(this, "constructor", { value: d }), x.apply(this, arguments), h(this) }; "__proto__" in d ? d.__proto__ = x : (d.from = x.from, d.of = x.of), d.BYTES_PER_ELEMENT = a; var e = function () { }; return e.prototype = D, d.prototype = new e, Object.defineProperty(d.prototype, "BYTES_PER_ELEMENT", { value: a }), Object.defineProperty(d.prototype, "_pack", { value: b }), Object.defineProperty(d.prototype, "_unpack", { value: c }), d } a.ArrayBuffer = a.ArrayBuffer || j, Object.defineProperty(x, "from", { value: function (a) { return new this(a) } }), Object.defineProperty(x, "of", { value: function () { return new this(arguments) } }); var D = {}; x.prototype = D, Object.defineProperty(x.prototype, "_getter", { value: function (a) { if (1 > arguments.length) throw SyntaxError("Not enough arguments"); if (a = g(a), !(a >= this.length)) { var b, c, d = []; for (b = 0, c = this.byteOffset + a * this.BYTES_PER_ELEMENT; b < this.BYTES_PER_ELEMENT; b += 1, c += 1)d.push(this.buffer._bytes[c]); return this._unpack(d) } } }), Object.defineProperty(x.prototype, "get", { value: x.prototype._getter }), Object.defineProperty(x.prototype, "_setter", { value: function (a, b) { if (2 > arguments.length) throw SyntaxError("Not enough arguments"); if (a = g(a), !(a >= this.length)) { var c, d, e = this._pack(b); for (c = 0, d = this.byteOffset + a * this.BYTES_PER_ELEMENT; c < this.BYTES_PER_ELEMENT; c += 1, d += 1)this.buffer._bytes[d] = e[c] } } }), Object.defineProperty(x.prototype, "constructor", { value: x }), Object.defineProperty(x.prototype, "copyWithin", { value: function (a, b) { var c = arguments[2], d = e(this), h = d.length, i = g(h); i = H(i, 0); var j, k = f(a); j = 0 > k ? H(i + k, 0) : I(k, i); var l, m = f(b); l = 0 > m ? H(i + m, 0) : I(m, i); var n = void 0 === c ? i : f(c); var o = 0 > n ? H(i + n, 0) : I(n, i); var p, q = I(o - l, i - j); for (l < j && j < l + q ? (p = -1, l = l + q - 1, j = j + q - 1) : p = 1; 0 < q;)d._setter(j, d._getter(l)), l += p, j += p, --q; return d } }), Object.defineProperty(x.prototype, "every", { value: function (a) { if (this === void 0 || null === this) throw TypeError(); var b = Object(this), c = g(b.length); if (!d(a)) throw TypeError(); for (var e = arguments[1], f = 0; f < c; f++)if (!a.call(e, b._getter(f), f, b)) return !1; return !0 } }), Object.defineProperty(x.prototype, "fill", { value: function (a) { var b = arguments[1], c = arguments[2], d = e(this), h = d.length, i = g(h); i = H(i, 0); var j, l = f(b); j = 0 > l ? H(i + l, 0) : I(l, i); var m = void 0 === c ? i : f(c); var n; for (n = 0 > m ? H(i + m, 0) : I(m, i); j < n;)d._setter(j, a), j += 1; return d } }), Object.defineProperty(x.prototype, "filter", { value: function (a) { if (this === void 0 || null === this) throw TypeError(); var b = Object(this), c = g(b.length); if (!d(a)) throw TypeError(); for (var e, f = [], h = arguments[1], j = 0; j < c; j++)e = b._getter(j), a.call(h, e, j, b) && f.push(e); return new this.constructor(f) } }), Object.defineProperty(x.prototype, "find", { value: function (a) { var b = e(this), c = b.length, f = g(c); if (!d(a)) throw TypeError(); for (var h = 1 < arguments.length ? arguments[1] : void 0, i = 0; i < f;) { var j = b._getter(i), l = a.call(h, j, i, b); if (!!l) return j; ++i } return void 0 } }), Object.defineProperty(x.prototype, "findIndex", { value: function (a) { var b = e(this), c = b.length, f = g(c); if (!d(a)) throw TypeError(); for (var h = 1 < arguments.length ? arguments[1] : void 0, i = 0; i < f;) { var j = b._getter(i), l = a.call(h, j, i, b); if (!!l) return i; ++i } return -1 } }), Object.defineProperty(x.prototype, "forEach", { value: function (a) { if (this === void 0 || null === this) throw TypeError(); var b = Object(this), c = g(b.length); if (!d(a)) throw TypeError(); for (var e = arguments[1], f = 0; f < c; f++)a.call(e, b._getter(f), f, b) } }), Object.defineProperty(x.prototype, "indexOf", { value: function (a) { if (void 0 === this || null === this) throw TypeError(); var b = Object(this), c = g(b.length); if (0 === c) return -1; var d = 0; if (0 < arguments.length && (d = +arguments[1], d == d ? 0 != d && d != 1 / 0 && d != -(1 / 0) && (d = (0 < d || -1) * F(E(d))) : d = 0), d >= c) return -1; for (var e = 0 <= d ? d : H(c - E(d), 0); e < c; e++)if (b._getter(e) === a) return e; return -1 } }), Object.defineProperty(x.prototype, "join", { value: function (a) { if (this === void 0 || null === this) throw TypeError(); for (var b = Object(this), c = g(b.length), d = Array(c), e = 0; e < c; ++e)d[e] = b._getter(e); return d.join(a === void 0 ? "," : a) } }), Object.defineProperty(x.prototype, "lastIndexOf", { value: function (a) { if (this === void 0 || null === this) throw TypeError(); var b = Object(this), c = g(b.length); if (0 === c) return -1; var d = c; 1 < arguments.length && (d = +arguments[1], d === d ? 0 !== d && d !== 1 / 0 && d !== -(1 / 0) && (d = (0 < d || -1) * F(E(d))) : d = 0); for (var e = 0 <= d ? I(d, c - 1) : c - E(d); 0 <= e; e--)if (b._getter(e) === a) return e; return -1 } }), Object.defineProperty(x.prototype, "map", { value: function (a) { if (this === void 0 || null === this) throw TypeError(); var b = Object(this), c = g(b.length); if (!d(a)) throw TypeError(); var e = []; e.length = c; for (var f = arguments[1], h = 0; h < c; h++)e[h] = a.call(f, b._getter(h), h, b); return new this.constructor(e) } }), Object.defineProperty(x.prototype, "reduce", { value: function (a) { if (this === void 0 || null === this) throw TypeError(); var b = Object(this), c = g(b.length); if (!d(a)) throw TypeError(); if (0 === c && 1 === arguments.length) throw TypeError(); var e, f = 0; for (e = 2 <= arguments.length ? arguments[1] : b._getter(f++); f < c;)e = a.call(void 0, e, b._getter(f), f, b), f++; return e } }), Object.defineProperty(x.prototype, "reduceRight", { value: function (a) { if (this === void 0 || null === this) throw TypeError(); var b = Object(this), c = g(b.length); if (!d(a)) throw TypeError(); if (0 === c && 1 === arguments.length) throw TypeError(); var e, f = c - 1; for (e = 2 <= arguments.length ? arguments[1] : b._getter(f--); 0 <= f;)e = a.call(void 0, e, b._getter(f), f, b), f--; return e } }), Object.defineProperty(x.prototype, "reverse", { value: function () { if (this === void 0 || null === this) throw TypeError(); for (var a, b = Object(this), c = g(b.length), d = F(c / 2), e = 0, f = c - 1; e < d; ++e, --f)a = b._getter(e), b._setter(e, b._getter(f)), b._setter(f, a); return b } }), Object.defineProperty(x.prototype, "set", { value: function () { if (1 > arguments.length) throw SyntaxError("Not enough arguments"); var a, b, c, e, f, h, j, k, l, m; if ("object" == typeof arguments[0] && arguments[0].constructor === this.constructor) { if (a = arguments[0], c = g(arguments[1]), c + a.length > this.length) throw RangeError("Offset plus length of array is out of range"); if (k = this.byteOffset + c * this.BYTES_PER_ELEMENT, l = a.length * this.BYTES_PER_ELEMENT, a.buffer === this.buffer) { for (m = [], f = 0, h = a.byteOffset; f < l; f += 1, h += 1)m[f] = a.buffer._bytes[h]; for (f = 0, j = k; f < l; f += 1, j += 1)this.buffer._bytes[j] = m[f] } else for (f = 0, h = a.byteOffset, j = k; f < l; f += 1, h += 1, j += 1)this.buffer._bytes[j] = a.buffer._bytes[h] } else if ("object" == typeof arguments[0] && "undefined" != typeof arguments[0].length) { if (b = arguments[0], e = g(b.length), c = g(arguments[1]), c + e > this.length) throw RangeError("Offset plus length of array is out of range"); for (f = 0; f < e; f += 1)h = b[f], this._setter(c + f, +h) } else throw TypeError("Unexpected argument type(s)") } }), Object.defineProperty(x.prototype, "slice", { value: function (b, d) { for (var h = e(this), i = h.length, j = g(i), l = f(b), m = 0 > l ? H(j + l, 0) : I(l, j), o = void 0 === d ? j : f(d), p = 0 > o ? H(j + o, 0) : I(o, j), q = p - m, r = h.constructor, c = new r(q), a = 0; m < p;) { var s = h._getter(m); c._setter(a, s), ++m, ++a } return c } }), Object.defineProperty(x.prototype, "some", { value: function (a) { if (this === void 0 || null === this) throw TypeError(); var b = Object(this), c = g(b.length); if (!d(a)) throw TypeError(); for (var e = arguments[1], f = 0; f < c; f++)if (a.call(e, b._getter(f), f, b)) return !0; return !1 } }), Object.defineProperty(x.prototype, "sort", { value: function (a) { if (this === void 0 || null === this) throw TypeError(); for (var b = Object(this), c = g(b.length), d = Array(c), e = 0; e < c; ++e)d[e] = b._getter(e); for (a ? d.sort(a) : d.sort(), e = 0; e < c; ++e)b._setter(e, d[e]); return b } }), Object.defineProperty(x.prototype, "subarray", { value: function (a, b) { function c(a, b, c) { return a < b ? b : a > c ? c : a } a = f(a), b = f(b), 1 > arguments.length && (a = 0), 2 > arguments.length && (b = this.length), 0 > a && (a = this.length + a), 0 > b && (b = this.length + b), a = c(a, 0, this.length), b = c(b, 0, this.length); var d = b - a; return 0 > d && (d = 0), new this.constructor(this.buffer, this.byteOffset + a * this.BYTES_PER_ELEMENT, d) } }); var G = y(1, k, l), J = y(1, m, n), K = y(1, o, n), L = y(2, p, q), M = y(2, r, s), N = y(4, t, u), O = y(4, v, w), P = y(4, C, B), Q = y(8, A, z); a.Int8Array = a.Int8Array || G, a.Uint8Array = a.Uint8Array || J, a.Uint8ClampedArray = a.Uint8ClampedArray || K, a.Int16Array = a.Int16Array || L, a.Uint16Array = a.Uint16Array || M, a.Int32Array = a.Int32Array || N, a.Uint32Array = a.Uint32Array || O, a.Float32Array = a.Float32Array || P, a.Float64Array = a.Float64Array || Q }(), function () { function b(a, b) { return d(a.get) ? a.get(b) : a[b] } function e(a, b, d) { if (!(a instanceof ArrayBuffer || "ArrayBuffer" === c(a))) throw TypeError(); if (b = g(b), b > a.byteLength) throw RangeError("byteOffset out of range"); if (d = void 0 === d ? a.byteLength - b : g(d), b + d > a.byteLength) throw RangeError("byteOffset and length reference an area beyond the end of the buffer"); Object.defineProperty(this, "buffer", { value: a }), Object.defineProperty(this, "byteLength", { value: d }), Object.defineProperty(this, "byteOffset", { value: b }) } function f(a) { return function (c, d) { if (c = g(c), c + a.BYTES_PER_ELEMENT > this.byteLength) throw RangeError("Array index out of range"); c += this.byteOffset; for (var e = new Uint8Array(this.buffer, c, a.BYTES_PER_ELEMENT), f = [], h = 0; h < a.BYTES_PER_ELEMENT; h += 1)f.push(b(e, h)); return !!d === !!j && f.reverse(), b(new a(new Uint8Array(f).buffer), 0) } } function h(a) { return function (c, d, e) { if (c = g(c), c + a.BYTES_PER_ELEMENT > this.byteLength) throw RangeError("Array index out of range"); var f, h, k = new a([d]), l = new Uint8Array(k.buffer), m = []; for (f = 0; f < a.BYTES_PER_ELEMENT; f += 1)m.push(b(l, f)); !!e === !!j && m.reverse(), h = new Uint8Array(this.buffer, c, a.BYTES_PER_ELEMENT), h.set(m) } } var j = function () { var a = new Uint16Array([4660]), c = new Uint8Array(a.buffer); return 18 === b(c, 0) }(); Object.defineProperty(e.prototype, "getUint8", { value: f(Uint8Array) }), Object.defineProperty(e.prototype, "getInt8", { value: f(Int8Array) }), Object.defineProperty(e.prototype, "getUint16", { value: f(Uint16Array) }), Object.defineProperty(e.prototype, "getInt16", { value: f(Int16Array) }), Object.defineProperty(e.prototype, "getUint32", { value: f(Uint32Array) }), Object.defineProperty(e.prototype, "getInt32", { value: f(Int32Array) }), Object.defineProperty(e.prototype, "getFloat32", { value: f(Float32Array) }), Object.defineProperty(e.prototype, "getFloat64", { value: f(Float64Array) }), Object.defineProperty(e.prototype, "setUint8", { value: h(Uint8Array) }), Object.defineProperty(e.prototype, "setInt8", { value: h(Int8Array) }), Object.defineProperty(e.prototype, "setUint16", { value: h(Uint16Array) }), Object.defineProperty(e.prototype, "setInt16", { value: h(Int16Array) }), Object.defineProperty(e.prototype, "setUint32", { value: h(Uint32Array) }), Object.defineProperty(e.prototype, "setInt32", { value: h(Int32Array) }), Object.defineProperty(e.prototype, "setFloat32", { value: h(Float32Array) }), Object.defineProperty(e.prototype, "setFloat64", { value: h(Float64Array) }), a.DataView = a.DataView || e }() })(this);